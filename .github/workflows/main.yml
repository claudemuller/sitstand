name: "Build & Release"

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            build_cmd: flutter build macos --release
            artifact_path: build/macos/Build/Products/Release
            artifact_name: sitstand-mac.zip
          - os: windows-latest
            build_cmd: flutter build windows --release
            artifact_path: build/windows/runner/Release
            artifact_name: sitstand-win.zip
          - os: ubuntu-latest
            build_cmd: |
              sudo apt-get update -y
              sudo apt-get install -y libgtk-3-dev cmake ninja-build libblkid-dev liblzma-dev libayatana-appindicator3-dev
              flutter build linux --release

              # Prepare AppDir and desktop file
              mkdir -p AppDir
              cat > AppDir/sitstand.desktop <<EOF
              [Desktop Entry]
              Type=Application
              Name=SitStand
              Exec=sitstand
              Icon=sitstand
              Categories=Utility;
              EOF

              cp build/linux/x64/release/bundle/sitstand AppDir/
              cp assets/icon.png AppDir/sitstand.png

              wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
              chmod +x linuxdeploy-x86_64.AppImage
              ./linuxdeploy-x86_64.AppImage --appdir AppDir --output appimage
            artifact_path: build/linux/x64/release/bundle
            artifact_name: sitstand-linux.AppImage

    steps:
      - uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          channel: stable

      - run: flutter pub get

      - run: ${{ matrix.build_cmd }}

      - run: zip -r ${{ matrix.artifact_name }} ${{ matrix.artifact_path }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download Mac artifact
        uses: actions/download-artifact@v4
        with:
          name: sitstand-mac.zip

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: sitstand-win.zip

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: sitstand-linux.AppImage

      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Modify Tag if exists
        if: env.TAG_EXISTS == 'true'
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Create or update GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
          artifacts: |
            sitstand-mac.zip
            sitstand-win.zip
            sitstand-linux.AppImage
          allowUpdates: true
